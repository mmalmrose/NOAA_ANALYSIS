  }
  outexp <- 0
  return(outexp)
}
jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
head(jerry)
tail(jerry(
))
tail(jerry)
jerry
unique(jerry)
newexp <- function(incolumn)
{
  if (toupper(incolumn)[1] == "H")
{
  outexp <- 2
  }
else if (toupper(incolumn)[1] == "K")
 {
  outexp <-3
}
else if   (toupper(incolumn)[1] == "M")
{
  outexp <-6
}
else if   (toupper(incolumn)[1] == "B")
{
  outexp <-9
  }
else outexp <- 0
  return(outexp)
}
jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
head(jerry)
tail(jerry)
unique(jerry)
unique(data$CROPDMGEXP)
unique(data$PROPDMGEXP)
s<- grepl("[^0-9]",data$PROPDMGEXP)
s
newexp <- function(incolumn)
{
  if (toupper(incolumn)[1] == "H")
{
  outexp <- 2
  }
else if (toupper(incolumn)[1] == "K")
 {
  outexp <-3
}
else if   (toupper(incolumn)[1] == "M")
{
  outexp <-6
}
else if   (toupper(incolumn)[1] == "B")
{
  outexp <-9
}
else if (grepl("[^0-9]", incolumn[1] == TRUE))
{
  outexp <- incolumn[1]
}
  else outexp <- 0
  return(outexp)
}
jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
unique(jerry)
head(data$PROPDMGEXP)
head(jerry)
newexp <- function(incolumn)
{
  if (toupper(incolumn)[1] == "H")
{
  outexp <- 2
  }
else if (toupper(incolumn)[1] == "K")
 {
  outexp <-3
}
else if   (toupper(incolumn)[1] == "M")
{
  outexp <-6
}
else if   (toupper(incolumn)[1] == "B")
{
  outexp <-9
}
else if (grepl("[^1-9]", incolumn[1] == TRUE))
{
  outexp <- incolumn[1]
}
  else outexp <- 0
  return(outexp)
}
jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
unique(jerry)
data$PROPDMGEXP
data$CROPDMGEXP
jerry <- mapply(data$CROPDMGEXP, FUN='newexp')
unique(jerry)
data$CROPDMGEXP[99865]
newexp <- function(incolumn)
{
  if (toupper(incolumn)[1] == "H")
{
  outexp <- 2
  }
else if (toupper(incolumn)[1] == "K")
 {
  outexp <-3
}
else if   (toupper(incolumn)[1] == "M")
{
  outexp <-6
}
else if   (toupper(incolumn)[1] == "B")
{
  outexp <-9
}
else if (grepl("[^1-9]", incolumn[1] == TRUE))
{
  outexp <- incolumn[1]
}
else 
{
  outexp <- 0
}
  return(outexp)
}
jerry <- mapply(data$CROPDMGEXP, FUN='newexp')
unique(jerry)
jerry
dattest = readcsv('test.csv')
dattest = read_csv('test.csv')
dattest <-read_csv('test.csv')
dattest <-read.csv('test.csv')
dattest
jerry <- mapply(dattest$colone, FUN='newexp')
jerry
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest <-read.csv('test.csv')
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
unique(jerry)
dattest <-read.csv('test.csv')
unique(jerry)
jerry
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
jerry[1]
jerry[3]
dattest$coltwo[3]
dattest$coltwo[4]
dattest$coltwo[4][1]
dattest$coltwo[4]
jerry[4]
newexp <- function(incolumn)
{
  if      (toupper(incolumn) == "H")  outexp <- 2
  else if (toupper(incolumn) == "K")  outexp <- 3
  else if (toupper(incolumn) == "M")  outexp <- 6
  else if   (toupper(incolumn) == "B")  outexp <- 9
  else if   (grepl("[^1-9]", incolumn == TRUE)) outexp <- incolumn[1]
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest
newexp(dattest$coltwo)
newexp(dattest$coltwo[2])
newexp(dattest$coltwo[1])
newexp(dattest$coltwo[4])
newexp <- function(incolumn)
{ testcol <- tostring(incolumn)
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if   (toupper(testcol) == "B")  outexp <- 9
  else if   (grepl("[^1-9]", testcol == TRUE)) outexp <- testcol[1]
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if   (toupper(testcol) == "B")  outexp <- 9
  else if   (grepl("[^1-9]", testcol == TRUE)) outexp <- testcol[1]
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if   (toupper(testcol) == "B")  outexp <- 9
  else if   (grepl("[^1-9]", testcol == TRUE)) outexp <- testcol[1]
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
newexp(dattest$colone)
dattest$colone
dattest$coltwo
newexp(dattest$coltwo)
grepl("[^0-9]", dattest$coltwo)
dattest$coltwo
grepl("[0-9]", dattest$coltwo)
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if   (toupper(testcol) == "B")  outexp <- 9
  else if   (grepl("[1-9]", testcol == TRUE)) outexp <- testcol[1]
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest$coltwo
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if   (toupper(testcol) == "B")  outexp <- 9
  else if   (grepl("[1-9]", testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
jerry
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (grepl("[1-9]", testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
newexp(dattest$coltwo[1])
dattest$coltwo
dattest$coltwo
newexp(dattest$coltwo[2])
newexp(dattest$coltwo[3])
toupper(dattest$coltwo[3])
toupper(dattest$coltwo[1])
toupper(dattest$coltwo[2])
dattest <- read.csv('test.csv')
toupper(dattest$coltwo[2])
toupper(dattest$coltwo[1])
toupper(dattest$coltwo[3])
toupper(dattest$coltwo[4])
dattest <- read.csv('test.csv')
toupper(dattest$coltwo[3])
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest <- read.csv('test.csv')
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (grepl("[1-9]", testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
dattest <- read.csv('test.csv')
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
grepl([0-9], dattest$coltwo == TRUE)
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (is.integer(incolumn), testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (is.integer(incolumn), testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (is.integer(incolumn) == TRUE) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
dattest <- read.csv('test.csv')
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest$coltwo
isinteger(dattest$coltwo[1])
is.integer(dattest$coltwo[1])
dattest$coltwo[1]
type(dattest$coltwo[1])
help(dattest$coltwo[1])
dattest$coltwo[1].value
dattest$coltwo[1].value()
grepl("[^1-9]", dattest$coltwo[1])
dattest$coltwo[1]
dattest <- read.csv('test.csv', header=TRUE)
dattest
unique(dattest$coltwo)
is.integer(dattest$coltwo)
is.integer(dattest$coltwo[1])
is.integer(dattest$coltwo[2])
grepl("[^1-9]", dattest$coltwo[1])
dattest$coltwo
dattest$coltwo[1]
dattest <- read.csv('test.csv', header=TRUE, sep=',')
dattest
dattest$coltwo
dattest <- read.csv('test.csv', header=TRUE, sep=',', as.is)
dattest <- read.table('test.csv', header=TRUE, sep=',')
dattest
dattest$coltwo
dattest$coltwo[]
dattest$coltwo$value
dattest$coltwo[,]
dattest$coltwo[1]
dattest$coltwo[1,]
dattest$coltwo[,1]
dattest$coltwo
dattest$coltwo <- as.character(dattest$coltwo)
dattest
dattest$coltwo[1]
newexp <- function(incolumn)
{ testcol <- toString(incolumn)
  testcol
  if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (grepl("[1-9]", testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
newexp <- function(incolumn)
{ if      (toupper(testcol) == "H")  outexp <- 2
  else if (toupper(testcol) == "K")  outexp <- 3
  else if (toupper(testcol) == "M")  outexp <- 6
  else if (toupper(testcol) == "B")  outexp <- 9
  else if (grepl("[1-9]", testcol == TRUE)) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
jerry <- mapply(dattest$coltwo, FUN='newexp')
grepl('[1-9]', dattest$coltwo[1])
newexp <- function(incolumn)
{ if      (toupper(incolumn) == "H")  outexp <- 2
  else if (toupper(incolumn) == "K")  outexp <- 3
  else if (toupper(incolumn) == "M")  outexp <- 6
  else if (toupper(incolumn) == "B")  outexp <- 9
  else if (grepl("[1-9]", incolumn) == TRUE) outexp <- testcol
  else  (outexp <- 0)
  return(outexp)
}
 jerry <- mapply(dattest$coltwo, FUN='newexp')
newexp <- function(incolumn)
{ if      (toupper(incolumn) == "H")  outexp <- 2
  else if (toupper(incolumn) == "K")  outexp <- 3
  else if (toupper(incolumn) == "M")  outexp <- 6
  else if (toupper(incolumn) == "B")  outexp <- 9
  else if (grepl("[1-9]", incolumn) == TRUE) outexp <- incolumn
  else  (outexp <- 0)
  return(outexp)
}
 jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
 jerry <- mapply(dattest$colone, FUN='newexp')
jerry
dattest$colone
dattest <- read.csv('test.csv', header=TRUE, sep=',', as.is=TRUE)
 jerry <- mapply(dattest$colone, FUN='newexp')
jerry
> dattest <- read.csv('test.csv', header=TRUE, sep=',', as.is=TRUE)
dattest <- read.csv('test.csv', header=TRUE, sep=',', as.is=TRUE)
dattest
dattest$colone
dattest$coltwo
 jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
jerry[1]
dattest$colthree <-jerry
dattest
dattest <- read.csv('test.csv', header=TRUE, sep=',', as.is=TRUE, strip.white=TRUE)d
dattest
 jerry <- mapply(dattest$coltwo, FUN='newexp')
jerry
dattest$colthree <-jerry
dattest
head(data)
 jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
jerry
unique(jerry)
max(data$PROPDMGEXP)
unique(data$PROPDMGEXP)
hist(jerry)
hist(jerry, ylim = 5)
hist(jerry)
colmax(jerry)
colMax(jerry)
where(jerry == 13)
s <-which.max(jerry)
s
jerry[234228]
jerry[23422:234228]
jerry[23422,234228]
jerry[23422]
jerry[23425]
jerry[23429]
jerry[23428]
jerry[234228]
data$CROPDMGEXP[234228]
data$CROPDMGEXP[2342]
https://stackoverflow.com/questions/24212739/how-to-find-the-highest-value-of-a-column-in-a-data-frame-in-r
data <- read.csv('test.csv', header=TRUE, sep=',', as.is=TRUE, strip.white=TRUE)
 jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
unique(jerry)
jerry
unique(data$PROPDMGEXP)
data
data <- read.csv(filename, header=TRUE, sep=',', as.is=TRUE, strip.white=TRUE)
filename = 'repdata%2Fdata%2FStormData.csv.bz2'
data <- read.csv(filename, header=TRUE, sep=',', as.is=TRUE, strip.white=TRUE)
 jerry <- mapply(data$PROPDMGEXP, FUN='newexp')
unique(jerry)
10**3
10**jerry
 jerry <- as.numeric(mapply(data$PROPDMGEXP, FUN='newexp'))
unique(jerry)
10**jerry
unique(jerry)
data$PROPDMGVAL <- data$PROPDMG*10 **as.numeric(mapply(data$PROPDMGEXP, FUN='newexp'))
head(data$PROPDMGVAL)
tail(data$PROPDMGVAL)
hist(data$PROPDMGVAL)
unique(data$PROPDMGVAL)
data$CROPDMGVAL  <- data$CROPDMG*10 **as.numeric(mapply(data$CROPDMGEXP, FUN='newexp'))
CropDat <- aggregate(CROPDMGVAL~EVTYPE, data, FUN=sum, na.rm = TRUE)
head(cropdat)
head(CropDat)
head(order(-CropDat$CROPDMGVAL)
)
head(order(CropDat$CROPDMGVAL)
)
s<- CropDat[order(-CropDat$CROPDMGVAL), ][1:5,]
s
unique(cropdat$EVTYPE)
unique(CropDat$EVTYPE)
s<- CropDat[order(-CropDat$CROPDMGVAL), ][1:20,]
s
s<- PropDat[order(-PropDat$PROPDMGVAL), ][1:20,]
CropDat <- aggregate(PROPDMGVAL~EVTYPE, data, FUN=sum, na.rm = TRUE)
PropDat <- aggregate(PROPDMGVAL~EVTYPE, data, FUN=sum, na.rm = TRUE)
head(PropDat)
aggDat <- aggregate(FATALITIES, INJURIES, PROPDMGVAL, CROPDMGVAL~EVTYPE, data, FUN=sum, na.rm = TRUE)
aggDat <- aggregate(FATALITIES~EVTYPE, data, FUN=sum, na.rm = TRUE)
aggDat <- aggregate(list(FATALITIES, INJURIES, PROPDMGVAL, CROPDMGVAL), by = EVTYPE, data, FUN=sum, na.rm = TRUE)
data$FATALITIES
aggDat <- aggregate(FATALITIES+INJURIES+ PROPDMGVAL+CROPDMGVAL~EVTYPE, data, FUN=sum, na.rm = TRUE)
aggDat
head(aggdat)
head(aggDat)
FatDat <- aggregate(FATALITIES~EVTYPE, data, FUN=sum, na.rm = TRUE)
InjDat <- aggregate(INJURIES~EVTYPE, data, FUN=sum, na.rm = TRUE)
data$FATALITIES
hist(data$FATALITIES)
propdmg <- PropDat[order(-PropDat$PROPDMGVAL), ][1:5, ]
propdmg
install.packages('RCurl')
install.packages('PKI')
install.packages('rsconnect')
quit()
